// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1089.X4RobotBuilder2016.subsystems;

import java.util.Timer;
import java.util.TimerTask;

import org.usfirst.frc1089.X4RobotBuilder2016.RobotMap;
import org.usfirst.frc1089.X4RobotBuilder2016.commands.*;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {

    public static final int DOWN = 0;
    public static final int LOW = 1;
    public static final int MEDIUM = 2;
    public static final int HIGH = 3;

	protected static final long SHOOTER_RELEASE_DELAY_MS = 500;
	public static final double RAISE_SHOOTER_CATCHUP_DELAY_SECS = .500;

    private final DoubleSolenoid lowElevator = RobotMap.shooterLowElevator;
    private final DoubleSolenoid highElevator = RobotMap.shooterHighElevator;
    private final Solenoid shooter = RobotMap.shooterShooter;

	private int position = HIGH;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

	/**
	 * <pre>
	 * public int getPosition()
	 * </pre>
	 * Gets the current position of the elevator
	 * @return the index of the current position
	 */
	public int getPosition() {
		return position;
	}
	
	/**
	 * <pre>
	 * public void raise(int pos)
	 * </pre>
	 * Raises the elevator to specified position.
	 * @param pos the position to set the elevator
	 */
	public void raise(int pos) {
		this.position = pos;
		switch(pos) {
			case DOWN: {			
				lowElevator.set(DoubleSolenoid.Value.kReverse);
				highElevator.set(DoubleSolenoid.Value.kReverse);
				break;
			}
			case LOW: {				//pancake
				lowElevator.set(DoubleSolenoid.Value.kForward);
				highElevator.set(DoubleSolenoid.Value.kReverse);
				break;
			}
			case MEDIUM: {			//shooting
				lowElevator.set(DoubleSolenoid.Value.kReverse);
				highElevator.set(DoubleSolenoid.Value.kForward);
				break;
			}
			case HIGH: {
				highElevator.set(DoubleSolenoid.Value.kForward);
				lowElevator.set(DoubleSolenoid.Value.kForward);
				break;
			}
		}
	}
	
	/**
	 * <pre>
	 * public void shoot()
	 * </pre>
	 * Schedules a {@code ShooterReleaseTask} if the shooter is ready to fire.
	 */
	public void shoot() {
		if (shooter.get()) {
			return;
		}
		shooter.set(true);
		Timer timer = new Timer();
		timer.schedule(new ShooterReleaseTask(shooter), SHOOTER_RELEASE_DELAY_MS);
		//Logger.debug(LoggerType.SHOOTING_DATA, "SHOT!");
	}
	
	/**
	 * The {@code ShooterReleaseTask} is a {@code TimerTask} used to trigger the release of the shooter piston.
	 */
	private class ShooterReleaseTask extends TimerTask {
		Solenoid _shooter;

		/**
		 * <pre>
		 * public ShooterReleaseTask(Solenoid shooter)
		 * </pre>
		 * Constructs a new {@code ShooterReleaseTask} with the specified {@code Solenoid} to be used
		 * to control the shooter piston.
		 * @param shooter {@code Solenoid} used to control the shooter piston
		 */
		public ShooterReleaseTask(Solenoid shooter) {
			this._shooter = shooter;
		}

		@Override
		public void run() {
			_shooter.set(false);
		}
	}	
}

